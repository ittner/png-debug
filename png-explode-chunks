#!/usr/bin/env python3


import os
import struct
import sys


class AbortError(Exception):
    pass


def read_exact_len(fp, reqlen):
    data = fp.read(reqlen)
    if len(data) != reqlen:
        raise ValueError("Bad chunk data length. Premature end of file?")
    return data


def iter_chunks(fp):
    PNG_MAGIC = b"\x89PNG\x0d\x0a\x1a\x0a"

    magic = fp.read(len(PNG_MAGIC))
    if magic != PNG_MAGIC:
        raise ValueError("Bad magic string. Not a PNG file?")
    yield (None, magic)

    while True:
        cklen = read_exact_len(fp, 4)
        (data_len,) = struct.unpack(">I", cklen)
        cktype = read_exact_len(fp, 4)
        ckdata = read_exact_len(fp, data_len)
        ckcrc = read_exact_len(fp, 4)
        yield (cktype, cklen + cktype + ckdata + ckcrc)
        if cktype == b"IEND":
            break


def main(fname, outdir=None):
    if not outdir:
        outdir = fname + ".exploded"
    if os.path.exists(outdir):
        if os.listdir(outdir):
            raise AbortError("Output directory exists and is not empty")
    else:
        os.mkdir(outdir)

    with open(fname, "rb") as fp:
        i = 0
        for cktup in iter_chunks(fp):
            cktype = cktup[0]
            if cktype:
                ckname = "_" + cktype.decode("ascii", "replace").replace("\ufffd", "_")
            else:
                ckname = ""
            ckfname = "%08d%s.bin" % (i, ckname)
            with open(os.path.join(outdir, ckfname), "wb") as ofp:
                ofp.write(cktup[1])
            i += 1


if __name__ == "__main__":
    if len(sys.argv) < 2:
        sys.stderr.write("Usage: %s <input.png> [output dir]\n" % sys.argv[0])
        sys.exit(1)
    try:
        main(sys.argv[1], sys.argv[2] if len(sys.argv) > 2 else None)
        sys.exit(0)
    except Exception as exc:
        sys.stderr.write(str(exc) + "\n")
        sys.exit(1)
